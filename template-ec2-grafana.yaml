AWSTemplateFormatVersion: '2010-09-09'
Description: >
  POC for native observability integrating AWS Managed Grafana with a CloudWatch data source,
  along with a sample Lambda, a container fleet (via an Auto Scaling Group) with CloudWatch Agent,
  and a DynamoDB table â€“ all encapsulated within a dedicated, compact VPC.
  
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances.
    Type: AWS::EC2::KeyPair::KeyName
  InstanceType:
    Description: EC2 instance type for the container fleet.
    Type: String
    Default: t3.small
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instance
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    # AllowedPattern: '(\\d{1,3}\\.){3}\\d{1,3}/\\d{1,2}'
    # ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x

Resources:
  ##################################
  # VPC and Networking Resources (Compact Design)
  ##################################
  COEAWSOBSVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: "COE-AWS-OBS-VPC"

  COEAWSOBSInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: "COE-AWS-OBS-IGW"

  COEAWSOBSVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref COEAWSOBSVPC
      InternetGatewayId: !Ref COEAWSOBSInternetGateway

  COEAWSOBSPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref COEAWSOBSVPC
      CidrBlock: 10.0.0.0/27
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "COE-AWS-OBS-PublicSubnet1"

  COEAWSOBSPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref COEAWSOBSVPC
      CidrBlock: 10.0.0.32/27
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "COE-AWS-OBS-PublicSubnet2"

  COEAWSOBSPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref COEAWSOBSVPC
      CidrBlock: 10.0.0.64/27
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "COE-AWS-OBS-PrivateSubnet1"

  COEAWSOBSPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref COEAWSOBSVPC
      CidrBlock: 10.0.0.96/27
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "COE-AWS-OBS-PrivateSubnet2"

  COEAWSOBSPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref COEAWSOBSVPC
      Tags:
        - Key: Name
          Value: "COE-AWS-OBS-PublicRT"

  COEAWSOBSPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: COEAWSOBSVPCGatewayAttachment
    Properties:
      RouteTableId: !Ref COEAWSOBSPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref COEAWSOBSInternetGateway

  COEAWSOBSPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref COEAWSOBSPublicSubnet1
      RouteTableId: !Ref COEAWSOBSPublicRouteTable

  COEAWSOBSPublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref COEAWSOBSPublicSubnet2
      RouteTableId: !Ref COEAWSOBSPublicRouteTable

  COEAWSOBSNatEIP:
    Type: AWS::EC2::EIP
    DependsOn: COEAWSOBSVPCGatewayAttachment
    Properties:
      Domain: vpc

  COEAWSOBSNatGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: COEAWSOBSVPCGatewayAttachment
    Properties:
      AllocationId: !GetAtt COEAWSOBSNatEIP.AllocationId
      SubnetId: !Ref COEAWSOBSPublicSubnet1
      Tags:
        - Key: Name
          Value: "COE-AWS-OBS-NATGateway"

  COEAWSOBSPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref COEAWSOBSVPC
      Tags:
        - Key: Name
          Value: "COE-AWS-OBS-PrivateRT"

  COEAWSOBSPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref COEAWSOBSPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref COEAWSOBSNatGateway

  COEAWSOBSPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref COEAWSOBSPrivateSubnet1
      RouteTableId: !Ref COEAWSOBSPrivateRouteTable

  COEAWSOBSPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref COEAWSOBSPrivateSubnet2
      RouteTableId: !Ref COEAWSOBSPrivateRouteTable

  ##############################
  # API Gateway
  ##############################
  COEAWSOBSApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "coe-aws-obs-apigateway-cf"
      Description: "Sample API Gateway for Lambda Integration"
      FailOnWarnings: true

  COEAWSOBSApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt COEAWSOBSApiGatewayRestApi.RootResourceId
      RestApiId: !Ref COEAWSOBSApiGatewayRestApi
      PathPart: "test"

  COEAWSOBSApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref COEAWSOBSApiGatewayRestApi
      ResourceId: !Ref COEAWSOBSApiGatewayResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${COEAWSOBSSampleLambdaFunction.Arn}/invocations

  COEAWSOBSApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: COEAWSOBSApiGatewayMethod
    Properties:
      RestApiId: !Ref COEAWSOBSApiGatewayRestApi
      StageName: "dev"

  ##############################
  # Sample Lambda Function with VPC Config
  ##############################
  COEAWSOBSLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "COE-AWS-OBS-Lambda-Execution-Role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  COEAWSOBSLambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for Lambda in VPC"
      VpcId: !Ref COEAWSOBSVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 10.0.0.0/24
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: "COE-AWS-OBS-Lambda-SG"

  COEAWSOBSSampleLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "COE-AWS-OBS-SampleLambda"
      Handler: index.handler
      Runtime: python3.12
      Role: !GetAtt COEAWSOBSLambdaExecutionRole.Arn
      Layers:
        - arn:aws:lambda:us-east-2:017000801446:layer:AWSLambdaPowertoolsPythonV3-python312-x86_64:7
      Code:
        ZipFile: |
          import json
          from dotenv import load_dotenv

          load_dotenv()

          # from aws_lambda_powertools.event_handler import APIGatewayRestResolver
          from aws_lambda_powertools.utilities.typing import LambdaContext
          from aws_lambda_powertools.logging import correlation_paths
          from aws_lambda_powertools import Logger
          from aws_lambda_powertools import Tracer
          from aws_lambda_powertools import Metrics
          from aws_lambda_powertools.metrics import MetricUnit

          # app = APIGatewayRestResolver()
          service = "coe-aws-obs-lambda"
          tracer = Tracer(service=service)
          logger = Logger(service=service)
          metrics = Metrics(namespace=service)

          @tracer.capture_method
          def create_table_structure():
              # Sample column names and data for DataFrame
              COLUMNS = ["full_name", "id", "project_manager_name", "project_name", 
                      "technical_skill", "soft_skills", "years_in_company", "seniority"]

              # Sample DataFrame initialization
              SAMPLE_DATA = [
                  ["John Doe", "1", "Alice", "Project A", {"Python": 3, "AWS": 2}, {"Communication": 5, "Teamwork": 4}, 3, "SE1"],
                  ["Jane Smith", "2", "Bob", "Project B", {"Java": 4, "AWS": 3}, {"Leadership": 5, "Problem-solving": 5}, 5, "SE2"],
                  ["Mark Johnson", "3", "Charlie", "Project A", {"Go": 4, "AWS": 4}, {"Adaptability": 4, "Collaboration": 3}, 2, "SE1"],
                  ["Eve Brown", "4", "Alice", "Project C", {"Ruby": 5, "SQL": 3}, {"Time management": 5, "Creativity": 4}, 6, "SSE"],
                  ["Chris Green", "5", "Bob", "Project B", {"JavaScript": 4, "AWS": 2}, {"Problem-solving": 5, "Teamwork": 3}, 3, "SE2"],
                  ["Olivia Taylor", "6", "David", "Project A", {"Python": 4, "Django": 3}, {"Communication": 4, "Leadership": 3}, 4, "SSE"],
                  ["Daniel White", "7", "Eve", "Project D", {"C++": 3, "Java": 4}, {"Adaptability": 4, "Collaboration": 5}, 2, "SE1"],
                  ["Sophia Martin", "8", "Frank", "Project E", {"Swift": 4, "AWS": 4}, {"Time management": 3, "Leadership": 4}, 5, "SSE"],
                  ["Liam Wilson", "9", "Grace", "Project F", {"Go": 4, "Kubernetes": 2}, {"Problem-solving": 5, "Teamwork": 4}, 7, "SSE"],
                  ["Mia Moore", "10", "Harry", "Project G", {"Java": 3, "React": 4}, {"Creativity": 5, "Communication": 4}, 1, "SE1"],
              ]

              return COLUMNS, SAMPLE_DATA

          @tracer.capture_method
          def analyze_employee_data(columns, data):
              # Basic statistics
              details = {
                  "number_of_columns": len(columns),
                  "number_of_rows": len(data),
                  "seniority_counts": {},
                  "total_years": 0,
                  "avg_years_in_company": 0,
                  "grouped_by_seniority": {},
                  "avg_years_by_seniority": {}
              }
              
              # Get seniority index for easier access
              seniority_idx = columns.index("seniority")
              years_idx = columns.index("years_in_company")
              
              # Initialize temporary storage for years by seniority
              years_by_seniority = {}
              
              # Process each row
              for row in data:
                  seniority = row[seniority_idx]
                  years = row[years_idx]
                  
                  # Update seniority counts
                  details["seniority_counts"][seniority] = details["seniority_counts"].get(seniority, 0) + 1
                  
                  # Update total years
                  details["total_years"] += years
                  
                  # Group by seniority
                  if seniority not in details["grouped_by_seniority"]:
                      details["grouped_by_seniority"][seniority] = []
                  details["grouped_by_seniority"][seniority].append(dict(zip(columns, row)))
                  
                  # Accumulate years by seniority for average calculation
                  if seniority not in years_by_seniority:
                      years_by_seniority[seniority] = []
                  years_by_seniority[seniority].append(years)
              
              # Calculate average years in company
              details["avg_years_in_company"] = round(details["total_years"] / len(data), 2)
              
              # Calculate average years by seniority
              for seniority, years_list in years_by_seniority.items():
                  details["avg_years_by_seniority"][seniority] = round(sum(years_list) / len(years_list), 2)
              
              return details

          # @app.get("/hello")
          @tracer.capture_method
          def test_logs():
              try:
                  # adding custom metrics
                  # See: https://awslabs.github.io/aws-lambda-powertools-python/latest/core/metrics/
                  metrics.add_metric(name="HelloWorldInvocations", unit=MetricUnit.Count, value=1)

                  columns, data = create_table_structure()

                  details = analyze_employee_data(columns, data)

                  key_logs = {"result_details": details }

                  logger.append_keys(**key_logs)

                  all_rows_dict = {}
                  data_id = columns.index("id")
                  data_full_name = columns.index("full_name")
                  for row in data:
                      # Prepare the row as a dictionary
                      row_dict = {
                          "Full_Name": row[data_full_name],
                          "ID": row[data_id]
                      }

                      all_rows_dict[row[data_id]] = row_dict

                  logger.debug({"all_rows": all_rows_dict})

                  # structured log
                  # See: https://awslabs.github.io/aws-lambda-powertools-python/latest/core/logger/
                  result = {
                      "statusCode": 200,
                      "message": json.dumps("Data retrieved successfully!"),
                      "body": {
                          "data": json.dumps(len(data))
                      }
                  }
              except Exception as ex:
                  result = {
                      "statusCode": 400,
                      "message": json.dumps("Data no retrieved!"),
                      "body": {
                          "data": "no_available"
                      },
                      "errors": ex
                  }

              logger.info(result)
              
              return result

          # Enrich logging with contextual information from Lambda
          @logger.inject_lambda_context(correlation_id_path=correlation_paths.API_GATEWAY_REST)
          # Adding tracer
          # See: https://awslabs.github.io/aws-lambda-powertools-python/latest/core/tracer/
          @tracer.capture_lambda_handler
          # ensures metrics are flushed upon request completion/failure and capturing ColdStart metric
          @metrics.log_metrics(capture_cold_start_metric=True)
          def lambda_handler(event: dict, context: LambdaContext) -> dict:
              # return app.resolve(event, context)
              return test_logs()

      VpcConfig:
        SubnetIds:
          - !Ref COEAWSOBSPrivateSubnet1
          - !Ref COEAWSOBSPrivateSubnet2
        SecurityGroupIds:
          - !Ref COEAWSOBSLambdaSecurityGroup

  COEAWSOBSLambdaPermissionForApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref COEAWSOBSSampleLambdaFunction
      Principal: apigateway.amazonaws.com
  
   ##############################
  # Container Fleet: Security Group
  ##############################
  COEAWSOBSContainerFleetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for container fleet instances"
      VpcId: !Ref COEAWSOBSVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: "COE-AWS-OBS-ContainerFleet-SG"

  ##############################
  # Container Fleet: Launch Template for ASG Instances (Using CloudWatch Agent)
  ##############################
  COEAWSOBSEC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy

  COEAWSOBSEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref COEAWSOBSEC2InstanceRole

  COEAWSOBSContainerFleetLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: "COE-AWS-OBS-ContainerFleet-LT"
      LaunchTemplateData:
        InstanceType: !Ref InstanceType
        ImageId: !FindInMap
          - RegionMap
          - !Ref 'AWS::Region'
          - AMI
        SecurityGroupIds:
          - !Ref COEAWSOBSContainerFleetSecurityGroup
        IamInstanceProfile:
          Name: !Ref COEAWSOBSEC2InstanceProfile
        UserData: !Base64 |
          #!/bin/bash
          yum update -y
          # Install CloudWatch Agent
          yum install -y amazon-cloudwatch-agent amazon-ssm-agent
          # Start SSM Agent
          systemctl enable amazon-ssm-agent
          systemctl start amazon-ssm-agent
          # Create CloudWatch Agent configuration file
          cat <<'EOF' > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
          {
            "agent": {
              "metrics_collection_interval": 60,
              "run_as_user": "root"
            },
            "metrics": {
              "append_dimensions": {
                "InstanceId": "${aws:InstanceId}"
              },
              "metrics_collected": {
                "cpu": {
                  "measurement": [
                    "cpu_usage_idle",
                    "cpu_usage_iowait",
                    "cpu_usage_user",
                    "cpu_usage_system"
                  ],
                  "metrics_collection_interval": 60,
                  "totalcpu": true
                },
                "disk": {
                  "measurement": [
                    "used_percent"
                  ],
                  "metrics_collection_interval": 60,
                  "resources": [
                    "*"
                  ]
                },
                "mem": {
                  "measurement": [
                    "mem_used_percent"
                  ],
                  "metrics_collection_interval": 60
                }
              }
            }
          }
          EOF
          # Start the CloudWatch Agent using the configuration file
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s

  ##############################
  # Container Fleet: Auto Scaling Group
  ##############################
  COEAWSOBSContainerFleetASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: "COE-AWS-OBS-ContainerFleet-ASG"
      LaunchTemplate:
        LaunchTemplateId: !Ref COEAWSOBSContainerFleetLaunchTemplate
        Version: !GetAtt COEAWSOBSContainerFleetLaunchTemplate.LatestVersionNumber
      MinSize: '1'
      MaxSize: '3'
      DesiredCapacity: '1'
      VPCZoneIdentifier:
        - !Ref COEAWSOBSPublicSubnet1
        - !Ref COEAWSOBSPublicSubnet2
      Tags:
        - Key: Name
          Value: "COE-AWS-OBS-ContainerFleet"
          PropagateAtLaunch: true

  ##############################
  # Sample DynamoDB Table
  ##############################
  COEAWSOBSSampleDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "COE-AWS-OBS-DynamoDB-Table"
      AttributeDefinitions:
        - AttributeName: "Id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "Id"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST

  ##################################
  # Grafana Instance
  ##################################
  COEAWSOBSGrafanaEC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "COE-AWS-OBS-GrafanaEC2Role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: COEAWSOBSGrafanaCloudWatchAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "AllowReadingMetricsFromCloudWatch"
                Effect: Allow
                Action:
                  - "cloudwatch:DescribeAlarmsForMetric"
                  - "cloudwatch:DescribeAlarmHistory"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:ListMetrics"
                  - "cloudwatch:GetMetricData"
                  - "cloudwatch:GetInsightRuleReport"
                Resource: "*"
              - Sid: "AllowReadingLogsFromCloudWatch"
                Effect: Allow
                Action:
                  - "logs:DescribeLogGroups"
                  - "logs:GetLogGroupFields"
                  - "logs:StartQuery"
                  - "logs:StopQuery"
                  - "logs:GetQueryResults"
                  - "logs:GetLogEvents"
                Resource: "*"
              - Sid: "AllowReadingTagsInstancesRegionsFromEC2"
                Effect: Allow
                Action:
                  - "ec2:DescribeTags"
                  - "ec2:DescribeInstances"
                  - "ec2:DescribeRegions"
                Resource: "*"
              - Sid: "AllowReadingResourcesForTags"
                Effect: Allow
                Action:
                  - "tag:GetResources"
                Resource: "*"

  COEAWSOBSGrafanaInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref COEAWSOBSGrafanaEC2Role

  COEAWSOBSGrafanaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and HTTP access to the Grafana server
      VpcId: !Ref COEAWSOBSVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0

  # Grafana Launch Template
  COEAWSOBSGrafanaLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: "COE-AWS-OBS-Grafana-LT"
      LaunchTemplateData:
        InstanceType: !Ref InstanceType
        SecurityGroupIds:
          - !Ref COEAWSOBSGrafanaSecurityGroup
        KeyName: !Ref KeyName
        IamInstanceProfile:
          Name: !Ref COEAWSOBSGrafanaInstanceProfile
        ImageId: !FindInMap
          - RegionMap
          - !Ref 'AWS::Region'
          - AMI
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            # Update all installed packages
            yum update -y

            # Add Grafana repository
            cat <<EOF > /etc/yum.repos.d/grafana.repo
            [grafana]
            name=grafana
            baseurl=https://rpm.grafana.com
            repo_gpgcheck=1
            enabled=1
            gpgcheck=1
            gpgkey=https://rpm.grafana.com/gpg.key
            sslverify=1
            sslcacert=/etc/pki/tls/certs/ca-bundle.crt
            EOF

            # Install Grafana
            yum install -y grafana

            # Configure Grafana SMTP settings
            cat <<EOF >> /etc/grafana/grafana.ini
            [smtp]
            enabled = true
            host = email-smtp.us-east-1.amazonaws.com:587
            user = ${COEAWSOBSSESIAMUser}
            password = ${COEAWSOBSSESIAMUserAccessKey}
            skip_verify = true
            from_address = luis.simon@encora.com
            from_name = Grafana
            startTLS_policy = true
            EOF

            # Reload systemd manager configuration
            systemctl daemon-reload

            # Enable and start Grafana server
            systemctl enable grafana-server
            systemctl start grafana-server


  # Grafana Instance using Launch Template
  COEAWSOBSGrafanaInstance:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref COEAWSOBSGrafanaLaunchTemplate
        Version: !GetAtt COEAWSOBSGrafanaLaunchTemplate.LatestVersionNumber
      SubnetId: !Ref COEAWSOBSPublicSubnet1
      Tags:
        - Key: Name
          Value: "COE-AWS-OBS-Grafana-Instance"

  ##################################
  # CloudWatch Alarms
  ##################################

  COEAWSOBSLambdaErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: "COE-AWS-OBS-LambdaErrorRateAlarm"
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref COEAWSOBSSampleLambdaFunction
      AlarmActions:
        - !Ref COEAWSOBSAlarmSNS

  COEAWSOBSEC2CPUStressAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: "COE-AWS-OBS-EC2CPUStressAlarm"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 5
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref COEAWSOBSGrafanaInstance
      AlarmActions:
        - !Ref COEAWSOBSAlarmSNS

  COEAWSOBSEC2MemoryUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: "COE-AWS-OBS-EC2MemoryUsageAlarm"
      MetricName: mem_used_percent
      Namespace: CWAgent
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 5
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref COEAWSOBSGrafanaInstance
      AlarmActions:
        - !Ref COEAWSOBSAlarmSNS

  COEAWSOBSASGInstancesStressAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: "COE-AWS-OBS-ASGInstancesStressAlarm"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 5
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref COEAWSOBSContainerFleetASG
      AlarmActions:
        - !Ref COEAWSOBSAlarmSNS

  COEAWSOBSAlarmSNS:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: "COE-AWS-OBS-AlarmNotifications"

  COEAWSOBSSESIAMUser:
    Type: AWS::IAM::User
    Properties:
      UserName: "COEAWSOBSSES_SMTP_User"
      Policies:
        - PolicyName: "COEAWSOBSSESSendEmailPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ses:SendEmail"
                  - "ses:SendRawEmail"
                Resource: "*"

  COEAWSOBSSESIAMUserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref COEAWSOBSSESIAMUser
Mappings:
  RegionMap:
    us-east-2:
      AMI: ami-0fc82f4dabc05670b

Outputs:
  VPCId:
    Description: "VPC Id"
    Value: !Ref COEAWSOBSVPC

  PublicSubnet1Id:
    Description: "Public Subnet 1 Id"
    Value: !Ref COEAWSOBSPublicSubnet1

  PublicSubnet2Id:
    Description: "Public Subnet 2 Id"
    Value: !Ref COEAWSOBSPublicSubnet2

  PrivateSubnet1Id:
    Description: "Private Subnet 1 Id"
    Value: !Ref COEAWSOBSPrivateSubnet1

  PrivateSubnet2Id:
    Description: "Private Subnet 2 Id"
    Value: !Ref COEAWSOBSPrivateSubnet2

  LambdaFunctionName:
    Description: "Name of the sample Lambda function"
    Value: !Ref COEAWSOBSSampleLambdaFunction

  DynamoDBTableName:
    Description: "Name of the sample DynamoDB table"
    Value: !Ref COEAWSOBSSampleDynamoDBTable

  ContainerFleetASGName:
    Description: "Name of the container fleet Auto Scaling Group"
    Value: !Ref COEAWSOBSContainerFleetASG

  InstancePublicIP:
    Description: Public IP address of the Grafana instance
    Value: !GetAtt COEAWSOBSGrafanaInstance.PublicIp

  GrafanaURL:
    Description: URL to access Grafana
    Value: !Sub
      - http://${PublicIp}:3000
      - PublicIp: !GetAtt COEAWSOBSGrafanaInstance.PublicIp

  SESIAMUserAccessKeyId:
    Description: "Access Key ID for SES SMTP User"
    Value: !Ref COEAWSOBSSESIAMUserAccessKey

  SESIAMUserSecretAccessKey:
    Description: "Secret Access Key for SES SMTP User"
    Value: !GetAtt COEAWSOBSSESIAMUserAccessKey.SecretAccessKey