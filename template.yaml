AWSTemplateFormatVersion: '2010-09-09'
Description: >
  POC for native observability integrating AWS Managed Grafana with a CloudWatch data source,
  along with a sample Lambda, a container fleet (via an Auto Scaling Group) with CloudWatch Agent,
  and a DynamoDB table – all encapsulated within a dedicated, compact VPC.
  
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances.
    Type: AWS::EC2::KeyPair::KeyName
  InstanceType:
    Description: EC2 instance type for the container fleet.
    Type: String
    Default: t3.micro

Resources:
  ##################################
  # VPC and Networking Resources (Compact Design)
  ##################################
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: "POC-VPC"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: "POC-IGW"

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnets (for container fleet) – each /27
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/27
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "POC-PublicSubnet1"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.32/27
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "POC-PublicSubnet2"

  # Private Subnets (for Lambda) – each /27
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.64/27
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "POC-PrivateSubnet1"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.96/27
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "POC-PrivateSubnet2"

  # Public Route Table and Association
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "POC-PublicRT"

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # NAT Gateway to enable outbound connectivity from private subnets
  NatEIP:
    Type: AWS::EC2::EIP
    DependsOn: VPCGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: VPCGatewayAttachment
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: "POC-NATGateway"

  # Private Route Table and Association
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "POC-PrivateRT"

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  ##################################
  # Observability & Application Resources
  ##################################
  
  ##############################
  # IAM Role for Managed Grafana
  ##############################
  GrafanaServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "POC-Grafana-Service-Role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: grafana.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchReadOnlyAccess

  ##############################
  # AWS Managed Grafana Workspace with Pre-configured CloudWatch DataSource
  ##############################
  GrafanaWorkspace:
    Type: AWS::Grafana::Workspace
    Properties:
      AccountAccessType: CURRENT_ACCOUNT
      AuthenticationProviders:
        - AWS_SSO
      PermissionType: SERVICE_MANAGED
      Name: "POC-Grafana-Workspace"
      RoleArn: !GetAtt GrafanaServiceRole.Arn
      DataSources:
        - CLOUDWATCH 

  ##############################
  # Sample Lambda Function with VPC Config
  ##############################
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "POC-Lambda-Execution-Role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for Lambda in VPC"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 10.0.0.0/24
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: "POC-Lambda-SG"

  SampleLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "POC-SampleLambda"
      Handler: index.handler
      Runtime: nodejs22.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
              console.log("Hello from Lambda!");
              return { statusCode: 200, body: "Hello, World!" };
          };
      VpcConfig:
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup

  ##############################
  # Container Fleet: Security Group
  ##############################
  ContainerFleetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for container fleet instances"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: "POC-ContainerFleet-SG"

  ##############################
  # Container Fleet: Launch Template for ASG Instances (Using CloudWatch Agent)
  ##############################
  ContainerFleetLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: "POC-ContainerFleet-LT"
      LaunchTemplateData:
        InstanceType: !Ref InstanceType
        ImageId: ami-0fc82f4dabc05670b # Updated valid AMI
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !Ref ContainerFleetSecurityGroup
        UserData: !Base64 |
          #!/bin/bash
          yum update -y
          # Install CloudWatch Agent
          yum install -y amazon-cloudwatch-agent
          # Create CloudWatch Agent configuration file
          cat <<'EOF' > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
          {
            "agent": {
              "metrics_collection_interval": 60,
              "run_as_user": "root"
            },
            "metrics": {
              "append_dimensions": {
                "InstanceId": "${aws:InstanceId}"
              },
              "metrics_collected": {
                "cpu": {
                  "measurement": [
                    "cpu_usage_idle",
                    "cpu_usage_iowait",
                    "cpu_usage_user",
                    "cpu_usage_system"
                  ],
                  "metrics_collection_interval": 60,
                  "totalcpu": true
                },
                "disk": {
                  "measurement": [
                    "used_percent"
                  ],
                  "metrics_collection_interval": 60,
                  "resources": [
                    "*"
                  ]
                },
                "mem": {
                  "measurement": [
                    "mem_used_percent"
                  ],
                  "metrics_collection_interval": 60
                }
              }
            }
          }
          EOF
          # Start the CloudWatch Agent using the configuration file
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s

  ##############################
  # Container Fleet: Auto Scaling Group
  ##############################
  ContainerFleetASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: "POC-ContainerFleet-ASG"
      LaunchTemplate:
        LaunchTemplateId: !Ref ContainerFleetLaunchTemplate
        Version: !GetAtt ContainerFleetLaunchTemplate.LatestVersionNumber
      MinSize: '1'
      MaxSize: '3'
      DesiredCapacity: '1'
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: "POC-ContainerFleet"
          PropagateAtLaunch: true

  ##############################
  # Sample DynamoDB Table
  ##############################
  SampleDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "POC-DynamoDB-Table"
      AttributeDefinitions:
        - AttributeName: "Id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "Id"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST

Outputs:
  VPCId:
    Description: "VPC Id"
    Value: !Ref VPC

  PublicSubnet1Id:
    Description: "Public Subnet 1 Id"
    Value: !Ref PublicSubnet1

  PublicSubnet2Id:
    Description: "Public Subnet 2 Id"
    Value: !Ref PublicSubnet2

  PrivateSubnet1Id:
    Description: "Private Subnet 1 Id"
    Value: !Ref PrivateSubnet1

  PrivateSubnet2Id:
    Description: "Private Subnet 2 Id"
    Value: !Ref PrivateSubnet2

  GrafanaWorkspaceId:
    Description: "ID of the Managed Grafana workspace"
    Value: !Ref GrafanaWorkspace

  GrafanaWorkspaceUrl:
    Description: "URL of the Managed Grafana workspace"
    Value: !GetAtt GrafanaWorkspace.Endpoint

  LambdaFunctionName:
    Description: "Name of the sample Lambda function"
    Value: !Ref SampleLambdaFunction

  DynamoDBTableName:
    Description: "Name of the sample DynamoDB table"
    Value: !Ref SampleDynamoDBTable

  ContainerFleetASGName:
    Description: "Name of the container fleet Auto Scaling Group"
    Value: !Ref ContainerFleetASG
