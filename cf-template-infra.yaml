AWSTemplateFormatVersion: '2010-09-09'
Description: >
  POC for native observability integrating AWS Managed Grafana with a CloudWatch data source,
  along with a sample Lambda, a container fleet (via an Auto Scaling Group) with CloudWatch Agent,
  and a DynamoDB table â€“ all encapsulated within a dedicated, compact VPC.
  
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances.
    Type: AWS::EC2::KeyPair::KeyName
  InstanceType:
    Description: EC2 instance type for the container fleet.
    Type: String
    Default: t3.small
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instance
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '^((\d{1,3}\.){3}\d{1,3}/\d{1,3})$'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x

Conditions:
  CreateApiGatewayStage: !Equals [!Ref "AWS::StackName", "coe-aws-obs-poc-stack-infra"]

Resources:
  ##################################
  # VPC and Networking Resources (Compact Design)
  ##################################
  COEAWSOBSVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: "coe-aws-obs-vpc"

  COEAWSOBSInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: "coe-aws-obs-igw"

  COEAWSOBSVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref COEAWSOBSVPC
      InternetGatewayId: !Ref COEAWSOBSInternetGateway

  COEAWSOBSPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref COEAWSOBSVPC
      CidrBlock: 10.0.0.0/27
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "coe-aws-obs-publicsubnet1"

  COEAWSOBSPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref COEAWSOBSVPC
      CidrBlock: 10.0.0.32/27
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "coe-aws-obs-publicsubnet2"

  COEAWSOBSPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref COEAWSOBSVPC
      CidrBlock: 10.0.0.64/27
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "coe-aws-obs-privatesubnet1"

  COEAWSOBSPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref COEAWSOBSVPC
      CidrBlock: 10.0.0.96/27
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "coe-aws-obs-privatesubnet2"

  COEAWSOBSPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref COEAWSOBSVPC
      Tags:
        - Key: Name
          Value: "coe-aws-obs-publicrt"

  COEAWSOBSPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: COEAWSOBSVPCGatewayAttachment
    Properties:
      RouteTableId: !Ref COEAWSOBSPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref COEAWSOBSInternetGateway

  COEAWSOBSPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref COEAWSOBSPublicSubnet1
      RouteTableId: !Ref COEAWSOBSPublicRouteTable

  COEAWSOBSPublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref COEAWSOBSPublicSubnet2
      RouteTableId: !Ref COEAWSOBSPublicRouteTable

  COEAWSOBSNatEIP:
    Type: AWS::EC2::EIP
    DependsOn: COEAWSOBSVPCGatewayAttachment
    Properties:
      Domain: vpc

  COEAWSOBSNatGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: COEAWSOBSVPCGatewayAttachment
    Properties:
      AllocationId: !GetAtt COEAWSOBSNatEIP.AllocationId
      SubnetId: !Ref COEAWSOBSPublicSubnet1
      Tags:
        - Key: Name
          Value: "coe-aws-obs-natgateway"

  COEAWSOBSPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref COEAWSOBSVPC
      Tags:
        - Key: Name
          Value: "coe-aws-obs-privatert"

  COEAWSOBSPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref COEAWSOBSPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref COEAWSOBSNatGateway

  COEAWSOBSPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref COEAWSOBSPrivateSubnet1
      RouteTableId: !Ref COEAWSOBSPrivateRouteTable

  COEAWSOBSPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref COEAWSOBSPrivateSubnet2
      RouteTableId: !Ref COEAWSOBSPrivateRouteTable

  ##############################
  # API Gateway
  ##############################
  COEAWSOBSApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "coe-aws-obs-apigateway-cf"
      Description: "Sample API Gateway for Lambda Integration"
      FailOnWarnings: true
      EndpointConfiguration:
        Types:
          - REGIONAL

  COEAWSOBSApiGatewayResourcePost:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt COEAWSOBSApiGatewayRestApi.RootResourceId
      RestApiId: !Ref COEAWSOBSApiGatewayRestApi
      PathPart: "test"

  COEAWSOBSApiGatewayResourceGet:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt COEAWSOBSApiGatewayRestApi.RootResourceId
      RestApiId: !Ref COEAWSOBSApiGatewayRestApi
      PathPart: "test/{id}"

  COEAWSOBSApiGatewayMethodGet:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref COEAWSOBSApiGatewayRestApi
      ResourceId: !Ref COEAWSOBSApiGatewayResourceGet
      HttpMethod: GET
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.id: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${COEAWSOBSSampleLambdaFunction.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
  
  COEAWSOBSApiGatewayMethodPost:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref COEAWSOBSApiGatewayRestApi
      ResourceId: !Ref COEAWSOBSApiGatewayResourcePost
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${COEAWSOBSSampleLambdaFunction.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
  
  COEAWSOBSApiGatewayMethodOptionsCORSPost:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref COEAWSOBSApiGatewayRestApi
      ResourceId: !Ref COEAWSOBSApiGatewayResourcePost
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
            ResponseTemplates:
              application/json: "{}"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
  
  COEAWSOBSApiGatewayMethodOptionsCORSGet:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref COEAWSOBSApiGatewayRestApi
      ResourceId: !Ref COEAWSOBSApiGatewayResourceGet
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.id: true
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
            ResponseTemplates:
              application/json: "{}"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  COEAWSOBSApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: 
      - COEAWSOBSApiGatewayMethodGet
      - COEAWSOBSApiGatewayMethodPost
      - COEAWSOBSApiGatewayMethodOptionsCORSGet
      - COEAWSOBSApiGatewayMethodOptionsCORSPost
    Properties:
      RestApiId: !Ref COEAWSOBSApiGatewayRestApi
      # StageName: "dev"
  
  COEAWSOBSApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Condition: CreateApiGatewayStage
    Properties:
      StageName: "dev"
      Description: "Development Stage with Tracing and Metrics"
      RestApiId: !Ref COEAWSOBSApiGatewayRestApi
      DeploymentId: !Ref COEAWSOBSApiGatewayDeployment
      TracingEnabled: true
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          MetricsEnabled: true
          DataTraceEnabled: true
          LoggingLevel: INFO
          ThrottlingBurstLimit: 5000
          ThrottlingRateLimit: 10000
      AccessLogSetting:
        DestinationArn: !GetAtt COEAWSOBSApiGatewayLogGroup.Arn
        Format: '{ "APIGateway" : { "requestId" : "$context.requestId", "ip" : "$context.identity.sourceIp", "caller" : "$context.identity.caller", "user" : "$context.identity.user", "requestTime" : "$context.requestTime", "httpMethod" : "$context.httpMethod", "resourcePath" : "$context.resourcePath", "status" : "$context.status", "protocol" : "$context.protocol", "responseLength" : "$context.responseLength", "type" : "$context.error.responseType", "errorMessage" : "$context.error.message", "xrayTraceId" : "$context.xrayTraceId" }, "Authorizer" : { "authorizerError" : "$context.authorizer.error", "authorizerErrorMessage" : "$context.authorizer.error.errorMessage", "authorizerStatus" : "$context.authorizer.status", "authorizerRequestId" : "$context.authorizer.requestId", "authenticateError" : "$context.authenticate.error", "authPrincipalId" : "$context.authorizer.principalId", "authToken" : "$context.authorizer.token" }, "Integration" : { "status" : "$context.integration.status", "error" : "$context.integration.error", "requestId" : "$context.integration.requestId" }, "WAF" : { "wafResponse" : "$context.wafResponseCode", "wafStatus" : "$context.waf.status", "wafError" : "$context.waf.error" } }'

  ##############################
  # API Gateway Logging Configuration
  ##############################
  COEAWSOBSApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/coe-aws-obs-agw-${COEAWSOBSApiGatewayRestApi}-logs"
    
  COEAWSOBSApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt COEAWSOBSApiGatewayCloudWatchRole.Arn

  COEAWSOBSApiGatewayCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  ##############################
  # Custom Domain for API Gateway
  ##############################
  # COEAWSOBSApiGatewayCustomDomainCertificate:
  #   Type: AWS::CertificateManager::Certificate
  #   Properties:
  #     DomainName: "api.encora.com"  # Replace with your actual domain
  #     ValidationMethod: DNS
  #     SubjectAlternativeNames:
  #       - "*.encora.com"  # Optional: include wildcard subdomain

  # COEAWSOBSApiGatewayCustomDomain:
  #   Type: AWS::ApiGateway::DomainName
  #   Properties:
  #     DomainName: "api.encora.com"  # Replace with your actual domain
  #     CertificateArn: !Ref COEAWSOBSApiGatewayCustomDomainCertificate
  #     EndpointConfiguration:
  #       Types:
  #         - REGIONAL

  # COEAWSOBSApiGatewayBasePathMapping:
  #   Type: AWS::ApiGateway::BasePathMapping
  #   Properties:
  #     DomainName: !Ref COEAWSOBSApiGatewayCustomDomain
  #     RestApiId: !Ref COEAWSOBSApiGatewayRestApi
  #     Stage: !Ref COEAWSOBSApiGatewayStage

  ##############################
  # Sample Lambda Function with VPC Config
  ##############################
  COEAWSOBSLambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for Lambda in VPC"
      VpcId: !Ref COEAWSOBSVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 10.0.0.0/24
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: "coe-aws-obs-lambda-sg"

  COEAWSOBSSampleLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "coe-aws-obs-lambda-cf"
      Handler: lambda_function.lambda_handler
      Runtime: python3.12
      Role: !GetAtt COEAWSOBSLambdaExecutionRole.Arn
      Layers:
        - arn:aws:lambda:us-east-2:017000801446:layer:AWSLambdaPowertoolsPythonV3-python312-x86_64:7
      Timeout: 30
      Code:
        S3Bucket: "coe-aws-obs-deployment-${AWS::Region}-${AWS::AccountId}"
        S3Key: "lambda/lambda_function.zip"
        # ZipFile:
      TracingConfig:
        Mode: Active
      Environment:
        Variables:
          DYNAMODB_TABLE: "coe-aws-obs-dynamodb-table"

      VpcConfig:
        SubnetIds:
          - !Ref COEAWSOBSPrivateSubnet1
          - !Ref COEAWSOBSPrivateSubnet2
        SecurityGroupIds:
          - !Ref COEAWSOBSLambdaSecurityGroup

  COEAWSOBSLambdaPermissionForApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref COEAWSOBSSampleLambdaFunction
      Principal: apigateway.amazonaws.com

  ##############################
  # Lambda X-Ray Configuration
  ##############################
  COEAWSOBSLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "coe-aws-obs-lambda-execution-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
      - PolicyName: DynamoDBAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
                - dynamodb:Query
                - dynamodb:Scan
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "*"

  ##############################
  # Container Fleet: Security Group
  ##############################
  COEAWSOBSContainerFleetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for container fleet instances"
      VpcId: !Ref COEAWSOBSVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9100
          ToPort: 9100
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: "coe-aws-obs-containerfleet-sg"

  ##############################
  # Container Fleet: Launch Template for ASG Instances (Using CloudWatch Agent)
  ##############################
  COEAWSOBSEC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: PrometheusMetricsAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "cloudwatch:GetMetricData"
                  - "cloudwatch:ListMetrics"
                Resource: "*"

  COEAWSOBSEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref COEAWSOBSEC2InstanceRole

  COEAWSOBSContainerFleetLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: "coe-aws-obs-containerfleet-lt"
      LaunchTemplateData:
        InstanceType: !Ref InstanceType
        ImageId: !FindInMap
          - RegionMap
          - !Ref 'AWS::Region'
          - AMI
        SecurityGroupIds:
          - !Ref COEAWSOBSContainerFleetSecurityGroup
        IamInstanceProfile:
          Name: !Ref COEAWSOBSEC2InstanceProfile
        UserData: !Base64 |
          #!/bin/bash
          yum update -y

          # Download and install Prometheus Node Exporter
          wget https://github.com/prometheus/node_exporter/releases/download/v1.9.0/node_exporter-1.9.0.linux-amd64.tar.gz
          tar -xvf node_exporter-1.9.0.linux-amd64.tar.gz
          cp node_exporter-1.9.0.linux-amd64/node_exporter /usr/local/bin/

          # Create a prometheus user and set ownership
          sudo useradd prometheus --no-create-home --shell /bin/false
          chown prometheus:prometheus /usr/local/bin/node_exporter

          # Create Prometheus Node Exporter systemd service
          cat <<EOF > /etc/systemd/system/prometheus-node-exporter.service
          [Unit]
          Description=Prometheus Node Exporter
          After=network.target
          [Service]
          User=prometheus
          Group=prometheus
          ExecStart=/usr/local/bin/node_exporter --web.listen-address=:9100
          Restart=always
          RestartSec=5
          [Install]
          WantedBy=multi-user.target
          EOF

          # Reload systemd manager configuration
          systemctl daemon-reload
          
          # Enable and start Prometheus Node Exporter
          systemctl enable prometheus-node-exporter
          systemctl start prometheus-node-exporter

          # Install CloudWatch Agent
          yum install -y amazon-cloudwatch-agent amazon-ssm-agent
          # Start SSM Agent
          systemctl enable amazon-ssm-agent
          systemctl start amazon-ssm-agent
          # Create CloudWatch Agent configuration file
          cat <<'EOF' > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
          {
            "agent": {
              "metrics_collection_interval": 60,
              "run_as_user": "root"
            },
            "metrics": {
              "append_dimensions": {
                "InstanceId": "${aws:InstanceId}"
              },
              "metrics_collected": {
                "cpu": {
                  "measurement": [
                    "cpu_usage_idle",
                    "cpu_usage_iowait",
                    "cpu_usage_user",
                    "cpu_usage_system"
                  ],
                  "metrics_collection_interval": 60,
                  "totalcpu": true
                },
                "disk": {
                  "measurement": [
                    "used_percent"
                  ],
                  "metrics_collection_interval": 60,
                  "resources": [
                    "*"
                  ]
                },
                "mem": {
                  "measurement": [
                    "mem_used_percent"
                  ],
                  "metrics_collection_interval": 60
                }
              }
            }
          }
          EOF
          # Start the CloudWatch Agent using the configuration file
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
  COEAWSOBSLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the Load Balancer
      VpcId: !Ref COEAWSOBSVPC
      SecurityGroupIngress:
        # Allow Prometheus to access the Load Balancer on port 9100
        - IpProtocol: tcp
          FromPort: 9100
          ToPort: 9100
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        # Allow the Load Balancer to forward traffic to the Container Fleet ASG on port 9100
        - IpProtocol: tcp
          FromPort: 9100
          ToPort: 9100
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: "COE-AWS-OBS-LoadBalancer-SG"
          
  COEAWSOBSAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: "COE-AWS-OBS-AppLoadBalancer"
      Subnets:
        - !Ref COEAWSOBSPublicSubnet1
        - !Ref COEAWSOBSPublicSubnet2
      SecurityGroups:
        - !Ref COEAWSOBSContainerFleetSecurityGroup
        - !Ref COEAWSOBSLoadBalancerSecurityGroup
      Scheme: internet-facing
      Type: application
      IpAddressType: ipv4
      
  COEAWSOBSALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: "COE-AWS-OBS-ALB-TargetGroup"
      Port: 9100
      Protocol: HTTP
      VpcId: !Ref COEAWSOBSVPC
      TargetType: instance
      HealthCheckEnabled: true
      HealthCheckPath: /metrics
      HealthCheckPort: 9100
      HealthCheckIntervalSeconds: 240
      HealthCheckTimeoutSeconds: 120
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-299

  COEAWSOBSAppLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref COEAWSOBSALBTargetGroup
      LoadBalancerArn: !Ref COEAWSOBSAppLoadBalancer
      Port: 9100
      Protocol: HTTP

  ##############################
  # Container Fleet: Auto Scaling Group
  ##############################
  COEAWSOBSContainerFleetASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: "coe-aws-obs-containerfleet-asg"
      LaunchTemplate:
        LaunchTemplateId: !Ref COEAWSOBSContainerFleetLaunchTemplate
        Version: !GetAtt COEAWSOBSContainerFleetLaunchTemplate.LatestVersionNumber
      MinSize: '1'
      MaxSize: '3'
      DesiredCapacity: '1'
      VPCZoneIdentifier:
        - !Ref COEAWSOBSPublicSubnet1
        - !Ref COEAWSOBSPublicSubnet2
      TargetGroupARNs:
        - !Ref COEAWSOBSALBTargetGroup
      Tags:
        - Key: Name
          Value: "coe-aws-obs-containerfleet"
          PropagateAtLaunch: true

  ##############################
  # Sample DynamoDB Table
  ##############################
  COEAWSOBSSampleDynamoDBTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain # Keep existing data
    Properties:
      TableName: "coe-aws-obs-dynamodb-table"
      AttributeDefinitions:
        - AttributeName: "Id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "Id"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST

  ##################################
  # Prometheus Security Group
  ##################################
  COEAWSOBSPrometheusSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and HTTP access to the Prometheus server.
      VpcId: !Ref COEAWSOBSVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: 9090
          ToPort: 9090
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9100
          ToPort: 9100
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 9100
          ToPort: 9100
          CidrIp: 0.0.0.0/0 # Private subnet CIDR block
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: "COE-AWS-OBS-Prometheus-SG"

  ##################################
  # Prometheus EC2 Instance
  ##################################
  COEAWSOBSPrometheusInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref COEAWSOBSPrometheusSecurityGroup
      SubnetId: !Ref COEAWSOBSPublicSubnet1
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      Tags:
        - Key: Name
          Value: "COE-AWS-OBS-Prometheus-Instance"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Update all installed packages
          yum update -y

          # Install Prometheus
          useradd --no-create-home --shell /bin/false prometheus
          mkdir /etc/prometheus
          mkdir /var/lib/prometheus
          chown prometheus:prometheus /etc/prometheus
          chown prometheus:prometheus /var/lib/prometheus

          # Download Prometheus
          curl -LO https://github.com/prometheus/prometheus/releases/download/v2.45.0/prometheus-2.45.0.linux-amd64.tar.gz
          tar -xvf prometheus-2.45.0.linux-amd64.tar.gz
          cp prometheus-2.45.0.linux-amd64/prometheus /usr/local/bin/
          cp prometheus-2.45.0.linux-amd64/promtool /usr/local/bin/
          cp -r prometheus-2.45.0.linux-amd64/consoles /etc/prometheus
          cp -r prometheus-2.45.0.linux-amd64/console_libraries /etc/prometheus
          chown -R prometheus:prometheus /etc/prometheus
          chown prometheus:prometheus /usr/local/bin/prometheus
          chown prometheus:prometheus /usr/local/bin/promtool

          # Create Prometheus configuration file
          cat <<EOF > /etc/prometheus/prometheus.yml
          global:
            scrape_interval: 15s
            scrape_timeout: 10s

          scrape_configs:
            - job_name: 'prometheus'
              static_configs:
                - targets: ['localhost:9090']

            - job_name: 'ec2_exporter_COEAWSOBSContainerFleet'
              static_configs:
                - targets: ['${COEAWSOBSAppLoadBalancer.DNSName}:9100']

            - job_name: 'ec2_exporter_COEAWSOBSGrafanaInstance'
              static_configs:
                - targets: ['${COEAWSOBSGrafanaInstance.PrivateIp}:9100']
          EOF

          # Create Prometheus systemd service
          cat <<EOF > /etc/systemd/system/prometheus.service
          [Unit]
          Description=Prometheus
          Wants=network-online.target
          After=network-online.target

          [Service]
          User=prometheus
          Group=prometheus
          Type=simple
          ExecStart=/usr/local/bin/prometheus \
            --config.file=/etc/prometheus/prometheus.yml \
            --storage.tsdb.path=/var/lib/prometheus \
            --web.console.templates=/etc/prometheus/consoles \
            --web.console.libraries=/etc/prometheus/console_libraries

          [Install]
          WantedBy=multi-user.target
          EOF

          # Start Prometheus
          systemctl daemon-reload
          systemctl enable prometheus
          systemctl start prometheus

  ##################################
  # Grafana Instance
  ##################################
  COEAWSOBSGrafanaEC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "coe-aws-obs-grafanaec2role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: COEAWSOBSGrafanaSendSNSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sns:Publish"
                Resource: !Ref COEAWSOBSAlarmSNS
        - PolicyName: COEAWSOBSGrafanaCloudWatchAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "AllowReadingMetricsFromCloudWatch"
                Effect: Allow
                Action:
                  - "cloudwatch:DescribeAlarmsForMetric"
                  - "cloudwatch:DescribeAlarmHistory"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:ListMetrics"
                  - "cloudwatch:GetMetricData"
                  - "cloudwatch:GetInsightRuleReport"
                Resource: "*"
              - Sid: "AllowReadingLogsFromCloudWatch"
                Effect: Allow
                Action:
                  - "logs:DescribeLogGroups"
                  - "logs:GetLogGroupFields"
                  - "logs:StartQuery"
                  - "logs:StopQuery"
                  - "logs:GetQueryResults"
                  - "logs:GetLogEvents"
                Resource: "*"
              - Sid: "AllowReadingTagsInstancesRegionsFromEC2"
                Effect: Allow
                Action:
                  - "ec2:DescribeTags"
                  - "ec2:DescribeInstances"
                  - "ec2:DescribeRegions"
                Resource: "*"
              - Sid: "AllowReadingResourcesForTags"
                Effect: Allow
                Action:
                  - "tag:GetResources"
                Resource: "*"

  COEAWSOBSGrafanaInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref COEAWSOBSGrafanaEC2Role

  COEAWSOBSGrafanaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and HTTP access to the Grafana server
      VpcId: !Ref COEAWSOBSVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9100
          ToPort: 9100
          SourceSecurityGroupId: !Ref COEAWSOBSPrometheusSecurityGroup

  # Grafana Launch Template
  COEAWSOBSGrafanaLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: "coe-aws-obs-grafana-lt"
      LaunchTemplateData:
        InstanceType: !Ref InstanceType
        SecurityGroupIds:
          - !Ref COEAWSOBSGrafanaSecurityGroup
        KeyName: !Ref KeyName
        IamInstanceProfile:
          Name: !Ref COEAWSOBSGrafanaInstanceProfile
        ImageId: !FindInMap
          - RegionMap
          - !Ref 'AWS::Region'
          - AMI
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            # Update all installed packages
            yum update -y

            # Download and install Prometheus Node Exporter
            wget https://github.com/prometheus/node_exporter/releases/download/v1.9.0/node_exporter-1.9.0.linux-amd64.tar.gz
            tar -xvf node_exporter-1.9.0.linux-amd64.tar.gz
            cp node_exporter-1.9.0.linux-amd64/node_exporter /usr/local/bin/

            # Create a prometheus user and set ownership
            sudo useradd prometheus --no-create-home --shell /bin/false
            chown prometheus:prometheus /usr/local/bin/node_exporter

            # Create Prometheus Node Exporter systemd service
            cat <<EOF > /etc/systemd/system/prometheus-node-exporter.service
            [Unit]
            Description=Prometheus Node Exporter
            After=network.target
            [Service]
            User=prometheus
            Group=prometheus
            ExecStart=/usr/local/bin/node_exporter --web.listen-address=:9100
            Restart=always
            RestartSec=5
            [Install]
            WantedBy=multi-user.target
            EOF

            # Reload systemd manager configuration
            systemctl daemon-reload

            # Enable and start Prometheus Node Exporter
            systemctl enable prometheus-node-exporter
            systemctl start prometheus-node-exporter

            # Add Grafana repository
            cat <<EOF > /etc/yum.repos.d/grafana.repo
            [grafana]
            name=grafana
            baseurl=https://rpm.grafana.com
            repo_gpgcheck=1
            enabled=1
            gpgcheck=1
            gpgkey=https://rpm.grafana.com/gpg.key
            sslverify=1
            sslcacert=/etc/pki/tls/certs/ca-bundle.crt
            EOF

            # Install Grafana
            yum install -y grafana

            # Reload systemd manager configuration
            systemctl daemon-reload

            # Enable and start Grafana server
            systemctl enable grafana-server
            systemctl start grafana-server


  # Grafana Instance using Launch Template
  COEAWSOBSGrafanaInstance:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref COEAWSOBSGrafanaLaunchTemplate
        Version: !GetAtt COEAWSOBSGrafanaLaunchTemplate.LatestVersionNumber
      SubnetId: !Ref COEAWSOBSPublicSubnet1
      Tags:
        - Key: Name
          Value: "coe-aws-obs-grafana-instance"

  ##################################
  # CloudWatch Alarms
  ##################################

  COEAWSOBSLambdaErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: "coe-aws-obs-lambdaerrorratealarm"
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref COEAWSOBSSampleLambdaFunction
      AlarmActions:
        - !Ref COEAWSOBSAlarmSNS

  COEAWSOBSEC2CPUStressAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: "coe-aws-obs-ec2cpustressalarm"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 5
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref COEAWSOBSGrafanaInstance
      AlarmActions:
        - !Ref COEAWSOBSAlarmSNS

  COEAWSOBSEC2MemoryUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: "coe-aws-obs-ec2memoryusagealarm"
      MetricName: mem_used_percent
      Namespace: CWAgent
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 5
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref COEAWSOBSGrafanaInstance
      AlarmActions:
        - !Ref COEAWSOBSAlarmSNS

  COEAWSOBSASGInstancesStressAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: "coe-aws-obs-asginstancesstressalarm"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 5
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref COEAWSOBSContainerFleetASG
      AlarmActions:
        - !Ref COEAWSOBSAlarmSNS

  COEAWSOBSAlarmSNS:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: "coe-aws-obs-alarmnotifications"

Mappings:
  RegionMap:
    us-east-2:
      AMI: ami-0fc82f4dabc05670b

Outputs:
  VPCId:
    Description: "VPC Id"
    Value: !Ref COEAWSOBSVPC

  PublicSubnet1Id:
    Description: "Public Subnet 1 Id"
    Value: !Ref COEAWSOBSPublicSubnet1

  PublicSubnet2Id:
    Description: "Public Subnet 2 Id"
    Value: !Ref COEAWSOBSPublicSubnet2

  PrivateSubnet1Id:
    Description: "Private Subnet 1 Id"
    Value: !Ref COEAWSOBSPrivateSubnet1

  PrivateSubnet2Id:
    Description: "Private Subnet 2 Id"
    Value: !Ref COEAWSOBSPrivateSubnet2

  LambdaFunctionName:
    Description: "Name of the sample Lambda function"
    Value: !Ref COEAWSOBSSampleLambdaFunction

  DynamoDBTableName:
    Description: "Name of the sample DynamoDB table"
    Value: !Ref COEAWSOBSSampleDynamoDBTable

  ContainerFleetASGName:
    Description: "Name of the container fleet Auto Scaling Group"
    Value: !Ref COEAWSOBSContainerFleetASG

  InstancePublicIP:
    Description: Public IP address of the Grafana instance
    Value: !GetAtt COEAWSOBSGrafanaInstance.PublicIp

  GrafanaURL:
    Description: URL to access Grafana
    Value: !Sub
      - http://${PublicIp}:3000
      - PublicIp: !GetAtt COEAWSOBSGrafanaInstance.PublicIp

  PrometheusInstancePublicIP:
    Description: Public IP address of the Prometheus instance.
    Value: !GetAtt COEAWSOBSPrometheusInstance.PublicIp

  PrometheusURL:
    Description: URL to access Prometheus.
    Value: !Sub
      - http://${PublicIp}:9090
      - PublicIp: !GetAtt COEAWSOBSPrometheusInstance.PublicIp
  
  # ApiGatewayCustomDomainName:
  #   Description: "Custom Domain Name for API Gateway"
  #   Value: !Ref COEAWSOBSApiGatewayCustomDomain

  # ApiGatewayCustomDomainDistributionDomainName:
  #   Description: "Distribution Domain Name for Custom Domain"
  #   Value: !GetAtt COEAWSOBSApiGatewayCustomDomain.DistributionDomainName